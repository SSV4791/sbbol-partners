apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${MODULE_NAME}
  version: ${VERSION}
  type: application
  template: partners-template
  template_version: v1
  deleteLabel: ${MODULE_NAME}-${VERSION}
metadata:
  name: partners-template
  annotations:
    description: |-
      This is template partners project
    iconClass: wheelchair-alt
    tags: partners-templates, partners-template
objects:
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: cm-${MODULE_NAME}-${VERSION}-app
    data:
      application.properties: |-
        server.port=8080
        spring.main.banner-mode=off
        spring.application.name=partners

        spring.http.encoding.charset=UTF-8
        spring.http.encoding.force=true
        spring.http.encoding.enabled=true
        server.tomcat.uri-encoding=UTF-8

        management.metrics.tags.application=partners
        management.metrics.export.prometheus.enabled=true

        management.endpoints.enabled-by-default=true
        management.endpoints.web.exposure.include=*
        management.endpoints.jmx.exposure.include=*
        management.endpoint.metrics.enabled=true
        management.endpoint.prometheus.enabled=true
        management.endpoint.health.show-details=always
        management.endpoint.health.cache.time-to-live=60000

        management.endpoint.health.enabled=true
        management.endpoint.health.group.readiness.include=dataSpaceCoreIndicator
        management.endpoint.health.group.readiness.show-details=always
        management.endpoint.health.group.liveness.include=ping
        management.endpoint.health.group.liveness.show-details=always

        core.url=${dataSpaceCoreUrl}

        dataspace.monitoring.enabled=true
        dataspace.monitoring.watch-metrics.enable=true
        dataspace.monitoring.watch-metrics.category.ru.sberbank.pprb.sbbol.partners=true

        dataspace.monitoring.watch-log.enable=true
        dataspace.monitoring.watch-log.level=error
        dataspace.monitoring.watch-log.category.ru.sberbank.pprb.sbbol.partners=all

        spring.sleuth.enabled=false
        dataspace.monitoring.datasource.sleuth.enabled=false
        dataspace.monitoring.datasource.enabled=false

        audit.url=${URL_AUDIT}
        audit.enabled=${AUDIT_ENABLED}

        dataspace.metamock.enabled=${METAMOCK_ENABLED}
        dataspace.metamock.url=${URL_METAMOCK}

        dataspace.account.service.local.mode.enabled=false
        dataspace.account.service.jrpc.url=${ACCOUNT_SERVICE_URL}

      jvm-arguments: |-

  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: cm-${MODULE_NAME}-${VERSION}-logback
    data:
      logback.xml: |-
        <?xml version="1.0" encoding="UTF-8"?>
        <configuration debug="true" scan="true" scanPeriod="30 seconds">
            <property name="loggingDir" value="/app/logs" />
            <property name="loggingFile" value="application.log" />
            <property name="loggingJSONFile" value="application.log.json" />

            <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${loggingDir}/${loggingFile}</file>
                <encoder>
                    <charset>UTF-8</charset>
                    <pattern>%d{ISO8601} [%t] [%level] \(%c\) [%C::%M:%L] mdc:\(%mdc\)| %m%n</pattern>
                </encoder>
                <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                    <fileNamePattern>${loggingDir}/${loggingFile}_%d{yyyy-MM-dd}_%i.zip</fileNamePattern>
                    <maxFileSize>10MB</maxFileSize>
                    <maxHistory>5</maxHistory>
                    <totalSizeCap>50MB</totalSizeCap>
                </rollingPolicy>
            </appender>

            <appender name="JSON" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${loggingDir}/${loggingJSONFile}</file>
                <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                    <providers>
                        <timestamp>
                            <fieldName>timestamp</fieldName>
                            <pattern>[UNIX_TIMESTAMP_AS_STRING]</pattern>
                        </timestamp>
                        <logLevel>
                            <fieldName>levelStr</fieldName>
                        </logLevel>
                        <logLevelValue>
                            <fieldName>levelInt</fieldName>
                        </logLevelValue>
                        <loggerName>
                            <fieldName>loggerName</fieldName>
                        </loggerName>
                        <threadName>
                            <fieldName>threadName</fieldName>
                        </threadName>
                        <callerData>
                            <classFieldName>callerClass</classFieldName>
                            <methodFieldName>callerMethod</methodFieldName>
                            <lineFieldName>callerLine</lineFieldName>
                            <fileFieldName>callerFile</fileFieldName>
                        </callerData>
                        <message/>
                        <stackTrace>
                            <fieldName>stackTrace</fieldName>
                            <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                                <maxDepthPerThrowable>30</maxDepthPerThrowable>
                                <maxLength>4096</maxLength>
                                <rootCauseFirst>true</rootCauseFirst>
                            </throwableConverter>
                        </stackTrace>
                        <pattern>
                            <omitEmptyFields>true</omitEmptyFields>
                            <pattern>
                              {
                                "requestUid": "%mdc{requestUid}",
                                "requestDepth": "#asLong{%mdc{requestDepth}}",
                                "sessionUid": "%mdc{sessionUid}",
                                "sessionLogin": "%mdc{sessionLogin}"
                              }
                            </pattern>
                        </pattern>
                        <nestedField>
                            <fieldName>mdc</fieldName>
                            <providers>
                                <mdc>
                                    <excludeMdcKeyName>requestUid</excludeMdcKeyName>
                                    <excludeMdcKeyName>requestDepth</excludeMdcKeyName>
                                    <excludeMdcKeyName>sessionUid</excludeMdcKeyName>
                                    <excludeMdcKeyName>sessionLogin</excludeMdcKeyName>
                                </mdc>
                            </providers>
                        </nestedField>
                    </providers>
                </encoder>
                <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                    <fileNamePattern>${loggingDir}/${loggingJSONFile}_%d{yyyy-MM-dd}_%i.zip</fileNamePattern>
                    <maxFileSize>10MB</maxFileSize>
                    <maxHistory>5</maxHistory>
                    <totalSizeCap>50MB</totalSizeCap>
                </rollingPolicy>
            </appender>

            <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{ISO8601} [%t] [%level] \(%c\) [%C::%M:%L] mdc:\(%mdc\)| %m%n</pattern>
                </encoder>
            </appender>

            <root level="info">
                <appender-ref ref="STDOUT"/>
                <appender-ref ref="FILE"/>
                <appender-ref ref="JSON"/>
            </root>
        </configuration>


  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: ${MODULE_NAME}-${VERSION}
      labels:
        app: ${MODULE_NAME}
        version: ${VERSION}
    spec:
      replicas: 1
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 0
      selector:
        matchLabels:
          app: ${MODULE_NAME}
          version: ${VERSION}
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: 'true'
            sidecar.istio.io/proxyLimitsCPU: 200m
            sidecar.istio.io/proxyLimitsMemory: 256Mi
            sidecar.istio.io/proxyRequestsCPU: 200m
            sidecar.istio.io/proxyRequestsMemory: 256Mi
          labels:
            app: ${MODULE_NAME}
            version: ${VERSION}
        spec:
          containers:
            - name: ${MODULE_NAME}
              image: ${registryUrl}/${registryProject}/${imageNameWithDigest}
              env:
                - name: NODE_NAME       #добавление имени ноды в переменные среды пода
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: POD_NAMESPACE    #добавление имени неймспейса в переменные среды пода
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: POD_NAME        #добавление имени пода в переменные среды пода
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: NODEID
                  value: ${MODULE_NAME}
                - name: RUN_DEBUG
                  value: "${RUN_DEBUG}"
                - name: JVM_OPTION
                  valueFrom:
                    configMapKeyRef:
                      name: cm-${MODULE_NAME}-${VERSION}-app
                      key: jvm-arguments
              ports:
                - containerPort: 8080
                  name: http
                - containerPort: 8000
                  name: tcp-debug
              envFrom:
                - configMapRef:
                    name: cm-${MODULE_NAME}-${VERSION}-app
              volumeMounts:
                - name: app-config
                  mountPath: /deployments/config
                  readOnly: true
                - name: logback-config
                  mountPath: /deployments/config/logback
                  readOnly: true
                - name: logsshare
                  mountPath: /app/logs
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /actuator/health/readiness
                  port: 8080
                  scheme: HTTP
                periodSeconds: 30
                successThreshold: 1
                timeoutSeconds: 10
                initialDelaySeconds: 80
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /actuator/health/liveness
                  port: 8080
                  scheme: HTTP
                periodSeconds: 30
                successThreshold: 1
                timeoutSeconds: 10
                initialDelaySeconds: 80
              resources:
                limits:
                  cpu: ${{limitCPU}}
                  memory: ${{limitMemory}}
                requests:
                  cpu: ${{requestCPU}}
                  memory: ${{requestMemory}}
            - name: fluentbit
              image: ${FLUENTBIT_IMAGE}
              resources:
                limits:
                  memory: 32Mi
                  cpu: '0.2'
                requests:
                  memory: 16Mi
                  cpu: '0.1'
              env:
                - name: service
                  value: ${moduleName}
                - name: cluster
                  value: dev-gen.sigma.sbrf.ru
                - name: moduleId
                  value: ${moduleName}
                - name: moduleVersion
                  value: latest
                - name: nodeId
                  value: ${moduleName}
                - name: standId
                  value: dev
                - name: zoneId
                  value: default
                - name: pod
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.name
                - name: namespace
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
              volumeMounts:
                - name: logsshare
                  mountPath: /app/logs
                - mountPath: /fluent-bit/etc
                  name: cm-ds-fluentbit
          volumes:
            - name: app-config
              configMap:
                name: cm-${MODULE_NAME}-${VERSION}-app
                items:
                  - key: application.properties
                    path: application.properties
            - name: logback-config
              configMap:
                name: cm-${MODULE_NAME}-${VERSION}-logback
                items:
                  - key: logback.xml
                    path: logback.xml
            - name: cm-ds-fluentbit
              configMap:
                defaultMode: 420
                name: cm-ds-fluentbit
            - name: logsshare
              emptyDir: {}

  - apiVersion: v1
    kind: Service
    metadata:
      name: svc-${MODULE_NAME}
      annotations:
        description: "Dataspace-partners application"
        # Аннотация для включения сбора метрик
        prometheus.io.scrape: "true"
        # Аннотация для указания HTTP endpoint с метриками приложения
        prometheus.io.path: "/actuator/prometheus"
        # Аннотация для указания порта подключения к HTTP endpoint с метриками
        prometheus.io.port: "8080"
    spec:
      selector:
        app: ${MODULE_NAME}
      ports:
        - name: http
          port: 8080
          targetPort: 8080
        - name: tcp-debug
          port: 8000
          targetPort: 8000
      type: LoadBalancer

parameters:
  - description: Service name to deploy
    displayName: ServiceName
    name: MODULE_NAME
  - description: Service name to deploy
    displayName: ServiceName
    name: VERSION
    value: "DEV-SNAPSHOT"
  - description: Url to Registry. Example sigma "registry.sigma.sbrf.ru" alpha "registry.ca.sbrf.ru"
    displayName: RegistryUrl
    name: registryUrl
  - description: Registry Project. Example "pprb/ci00682829_cdm"
    displayName: RegistryProject
    name: registryProject
  - description: Url to instance partners
    displayName: dataSpaceCoreUrl
    name: dataSpaceCoreUrl
  - description: Url to fluentbit image
    displayName: FluentBitImage
    name: FLUENTBIT_IMAGE
  - description: Enable remote debug port (true/false)
    displayName: RunDebug
    name: RUN_DEBUG
    value: "true"
  - description: Limit CPU millicores main container
    displayName: MiliCores
    name: limitCPU
    value: "1000m"
  - description: Limit Memory millicores main container
    displayName: Memory_Size
    name: limitMemory
    value: "1024Mi"
  - description:  Request CPU millicores main container
    displayName: MiliCores
    name: requestCPU
    value: "1000m"
  - description: Request Memory millicores main container
    displayName: Memory_Size
    name: requestMemory
    value: "1024Mi"
  - description: enable/disable audit
    displayName: AuditEnabled
    name: AUDIT_ENABLED
    value: "false"
  - description: url audit
    displayName: UrlAudit
    name: URL_AUDIT
    value: "http://demo.sigma.audit-http-proxy.apps.dev-gen.sigma.sbrf.ru"
  - description: enable/disable metaMock
    displayName: MetaMockEnabled
    name: METAMOCK_ENABLED
    value: "false"
  - description: url MetaMock
    displayName: urlMetamock
    name: URL_METAMOCK
    value: "http://10.46.233.117:1415"
  - description: url account service
    displayName: urlAccountService
    name: ACCOUNT_SERVICE_URL
    value: "http://localhost:8080"