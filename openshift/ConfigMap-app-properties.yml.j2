---
kind: ConfigMap
apiVersion: v1
metadata:
  name: cm-app-properties-{{ canary_suffix }}
  labels:
    templates/type: app
data:
  application.properties: |-
    server.port=8080
    server.shutdown=graceful

    spring.jpa.open-in-view=false
    spring.jpa.properties.hibernate.jdbc.time_zone=UTC
    spring.jpa.properties.hibernate.cache.use_second_level_cache=true
    spring.jpa.properties.hibernate.cache.use_query_cache=true
    spring.jpa.properties.hibernate.cache.region.factory_class=jcache
    spring.jpa.properties.hibernate.query.in_clause_parameter_padding=true
    spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

    spring.main.banner-mode=off
    spring.application.name={{ os_project.name }}
    spring.liquibase.enabled=false
    spring.profiles.active=default

    server.servlet.encoding.charset=UTF-8
    server.servlet.encoding.force=true
    server.servlet.encoding.enabled=true
    server.tomcat.uri-encoding=UTF-8
    server.max-http-header-size=40000

    management.endpoints.enabled-by-default=true
    management.endpoints.web.exposure.include=health,prometheus
    management.endpoints.web.base-path={{ context_prefix }}actuator
    management.endpoints.jmx.exposure.include=*
    management.endpoint.health.probes.enabled=true
    management.endpoint.health.show-details=always
    management.metrics.tags.application={{ os_project.name }}
    management.metrics.export.prometheus.enabled=true

    # Service Cache
    service.legacy.cache.time={{ os_project.service.legacy.cache.time | default('300')}}
    service.legacy.cache.size={{ os_project.service.legacy.cache.size | default('1000')}}
    service.gku_inn_dictionary.cache.time={{ os_project.service.gku_inn_dictionary.cache.time | default('3600')}}
    service.gku_inn_dictionary.cache.size={{ os_project.service.gku_inn_dictionary.cache.size | default('10000')}}
    service.budget_mask_dictionary.cache.size={{ os_project.service.budget_mask_dictionary.cache.size | default('10000')}}

    # AutoProc params
    migrate.gku.batch_size={{ migrate.gku.batch_size | default('10000')}}
    migrate.gku.date_before={{ migrate.gku.date_before | default('1')}}

    # Audit
    audit.enabled={{ os_project.audit.enabled | default('false')}}
    audit.read_time_out={{ os_project.audit.read_time_out | default('5000')}}
    audit.connection_time_out={{ os_project.audit.connection_time_out | default('1000')}}
    audit.x-node-id={{ openshift.env }}
    audit.event.publish.retry.max_attempts={{ os_project.audit.event.publish.retry.max_attempts | default('10')}}
    audit.event.publish.retry.interval={{ os_project.audit.event.publish.retry.interval | default('5000')}}
    audit.event.publish.executor.threads={{ os_project.audit.event.publish.executor.threads | default('2')}}
    audit.url={% if int_entry.pprb.audit is mapping %}{{ int_entry.pprb.audit.host }}{% else %}{{ int_entry.pprb.audit | map(attribute='host') | first }}{% endif %}:{% if int_entry.pprb.audit is mapping %}{{ int_entry.pprb.audit.istio_mesh_port }}{% else %}{{ int_entry.pprb.audit | map(attribute='istio_mesh_port') | first | default('80') }}{% endif %}

    # Sbbol connect
    sbbol.url={% if int_entry.sbbol.rest_in is mapping %}{{ int_entry.sbbol.rest_in.host }}{% else %}{{ int_entry.sbbol.rest_in | map(attribute='host') | first }}{% endif %}:{% if int_entry.sbbol.rest_in is mapping %}{{ int_entry.sbbol.rest_in.istio_mesh_port | default('80') }}{% else %}{{ int_entry.sbbol.rest_in | map(attribute='istio_mesh_port') | first | default('80') }}{% endif %}/ss-rest/api
    sbbol.read_time_out={{ os_project.sbbol.read_time_out | default('5000') }}
    sbbol.connection_time_out={{ os_project.sbbol.connection_time_out | default('1000') }}
    sbbol.retry.max_attempts={{  os_project.sbbol.retry.max_attempts | default('3') }}
    sbbol.retry.interval={{  os_project.sbbol.retry.interval | default('5000') }}

    # Fraud
    fraud.enabled={{ os_project.fraud.enabled | default('true') }}
    fraud.read_time_out={{ os_project.fraud.read_time_out | default('5000') }}
    fraud.connection_time_out={{ os_project.fraud.connection_time_out | default('1000') }}
    fraud.endpoint={{ os_project.fraud.endpoint | default('/antifraud/v2/document/analyze') }}
    fraud.url={% if int_entry.pprb.fraud is mapping %}{{ int_entry.pprb.fraud.host }}{% else %}{{ int_entry.pprb.fraud | map(attribute='host') | first }}{% endif %}:{% if int_entry.pprb.fraud is mapping %}{{ int_entry.pprb.fraud.istio_mesh_port }}{% else %}{{ int_entry.pprb.fraud | map(attribute='istio_mesh_port') | first | default('80') }}{% endif %}

    # Replication
    replication.sbbol.enable={{ os_project.replication.sbbol.enable | default('false') }}
    replication.sbbol.cron={{ os_project.replication.sbbol.cron | default('0 0 23 * * *') }}
    replication.sbbol.sleepTime={{ os_project.replication.sbbol.sleepTime | default('60000') }}
    replication.sbbol.batchSize={{ os_project.replication.sbbol.batchSize | default('1000') }}
    replication.sbbol.retry={{ os_project.replication.sbbol.retry | default('2') }}
    replication.sbbol.gku.executor.threads={{ os_project.replication.sbbol.gku.executor.threads | default('1') }}

    # Scheduler
    scheduler.account-updater.enable={{ os_project.scheduler.account_updater.enable | default('false') }}
    scheduler.account-updater.cron={{ os_project.scheduler.account_updater.cron | default('0 0 17 ? * 6,7') }}
    scheduler.account-updater.batchSize={{ os_project.scheduler.account_updater.batchSize | default('1000') }}

    # Application Journal
    appjournal.moduleId=pprb4-digital-partners

    # Partner Type in account
    account.include.partner-type={{ os_project.account.include.partner_type | default('false') }}

    #StandIn plugin
    standin.plugin.configuration.journalHashKeyResolver={{ standin.plugin.configuration.journalHashKeyResolver | default('INTERFACE')}}
    standin.plugin.configuration.replicationStrategy={{ standin.plugin.configuration.replicationStrategy | default('STANDIN_LOCKS')}}
    standin.plugin.configuration.serializerType={{ standin.plugin.configuration.serializerType | default('BINARY_KRYO')}}
    standin.plugin.configuration.partitionLockMode={{ standin.plugin.configuration.partitionLockMode | default('NONE')}}
    standin.plugin.configuration.orderingControlStrategy={{ standin.plugin.configuration.orderingControlStrategy | default('OPTIMISTIC_LOCK_VERSION_CONTROL')}}
    standin.plugin.configuration.partitionMultiplyingMode={{ standin.plugin.configuration.partitionMultiplyingMode | default('FORBIDDEN')}}

    standin.cloud.client.heartBeatPeriod=1000
    standin.cloud.client.subscriptionKafkaConcurrency=10
    standin.cloud.client.groupId=group_1
    standin.cloud.client.kafka-retry=10
    standin.cloud.client.retry-timeout=10000
    standin.cloud.client.zoneId={{ appjournal_zone_id }}
    standin.cloud.client.kafka.producerConfig."[max.request.size]"=4500000
    standin.cloud.client.kafka.producerConfig."[security.protocol]"=SSL
    standin.cloud.client.kafka.producerConfig."[ssl.keystore.location]"=/opt/keystore/kafka/server.keystore.jks
    standin.cloud.client.kafka.producerConfig."[ssl.truststore.location]"=/opt/keystore/kafka/trust.jks
    standin.cloud.client.kafka.producerConfig."[ssl.keystore.type]"=JKS
    standin.cloud.client.kafka.producerConfig."[ssl.truststore.type]"=JKS
    standin.cloud.client.kafka.producerConfig."[ssl.protocol]"=TLS
    standin.cloud.client.kafka.producerConfig."[ssl.enabled.protocols]"=TLSv1.2
    standin.cloud.client.kafka.producerConfig."[ssl.endpoint.identification.algorithm]"=
    standin.cloud.client.kafka.consumerConfig."[security.protocol]"=SSL
    standin.cloud.client.kafka.consumerConfig."[ssl.keystore.location]"=/opt/keystore/kafka/server.keystore.jks
    standin.cloud.client.kafka.consumerConfig."[ssl.truststore.location]"=/opt/keystore/kafka/trust.jks
    standin.cloud.client.kafka.consumerConfig."[ssl.keystore.type]"=JKS
    standin.cloud.client.kafka.consumerConfig."[ssl.truststore.type]"=JKS
    standin.cloud.client.kafka.consumerConfig."[ssl.protocol]"=TLS
    standin.cloud.client.kafka.consumerConfig."[ssl.enabled.protocols]"=TLSv1.2
    standin.cloud.client.kafka.consumerConfig."[ssl.endpoint.identification.algorithm]"=

{% for entry in integration_entries | flatten %}
{% if entry.ci is defined and entry.health_path is defined %}
    health.http.endpoint[{{ entry.ci }}_{{ entry.name }}].url=http://{{ entry.host }}{{ ':' ~ entry.istio_mesh_port if entry.istio_mesh_port is defined }}{{ entry.health_path }}
{% endif %}
{% endfor %}
  jvm-arguments: |-
